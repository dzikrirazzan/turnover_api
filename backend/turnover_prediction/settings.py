"""
Django settings for turnover_prediction project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url
import pymysql

# Configure PyMySQL as MySQL driver
pymysql.install_as_MySQLdb()

# Load environment variables
load_dotenv()

# Detect if we're running collectstatic (build time)
RUNNING_COLLECTSTATIC = 'collectstatic' in sys.argv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Add backend directory to Python path for module discovery during build
import sys
sys.path.insert(0, str(BASE_DIR / 'backend'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# ALLOWED_HOSTS, SECRET_KEY, DEBUG, DJANGO_SETTINGS_MODULE dari env
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'turnover-api-hd7ze.ondigitalocean.app,*.ondigitalocean.app,127.0.0.1,localhost').split(',')
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-production-smarten-2025-change-this-32chars')
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'


# Database config (DATABASE_URL is primary, MySQL DigitalOcean)
DATABASES = {
    'default': dj_database_url.config(conn_max_age=600)
}

# Special handling for collectstatic - use minimal database config
if RUNNING_COLLECTSTATIC or os.getenv('DJANGO_COLLECTSTATIC'):
    print("ðŸŽ¨ Running collectstatic - using minimal database config")
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': ':memory:',
    }


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'predictions',
    'performance',
]

# Custom user model
AUTH_USER_MODEL = 'predictions.Employee'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # CSRF DISABLED FOR API ENDPOINTS - SIMPLE SOLUTION
    # 'django.middleware.csrf.CsrfViewMiddleware',  # COMMENTED OUT - NO MORE CSRF ISSUES!
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.turnover_prediction.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'turnover_prediction.wsgi.application'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = os.getenv('STATIC_URL', '/static/')
STATIC_ROOT = os.path.join(BASE_DIR, os.getenv('STATIC_ROOT', 'staticfiles'))

# Only add STATICFILES_DIRS if the static directory exists (avoid error during collectstatic)
STATIC_DIR = os.path.join(BASE_DIR, 'static')
if os.path.exists(STATIC_DIR):
    STATICFILES_DIRS = [STATIC_DIR]
else:
    STATICFILES_DIRS = []

# WhiteNoise static file serving for production
if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (if needed in future)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS and CSRF - SIMPLIFIED AND PERMISSIVE FOR API TESTING
CORS_ALLOWED_ORIGINS = [
    "https://smart-en-system.vercel.app",
    "https://turnover-api-hd7ze.ondigitalocean.app",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True  # ALLOW ALL FOR API TESTING

# CORS headers for better API compatibility
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding', 
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'access-control-allow-origin',
    'access-control-allow-headers',
    'access-control-allow-methods',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH', 
    'POST',
    'PUT',
]

# CSRF COMPLETELY DISABLED - NO MORE CSRF ISSUES!
# (CSRF middleware already commented out above)
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False
CSRF_USE_SESSIONS = False
CSRF_COOKIE_SAMESITE = None
CSRF_TRUSTED_ORIGINS = [
    'https://smart-en-system.vercel.app',
    'https://turnover-api-hd7ze.ondigitalocean.app',
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'https://postman.com',  # Allow Postman
    'https://www.postman.com',  # Allow Postman
    'https://app.postman.com',  # Allow Postman
]


# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}

# Logging
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
DJANGO_LOG_LEVEL = os.getenv('DJANGO_LOG_LEVEL', 'INFO')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': LOG_LEVEL,
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
        },
        'console': {
            'level': LOG_LEVEL,
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': DJANGO_LOG_LEVEL,
            'propagate': True,
        },
        'predictions': {
            'handlers': ['file', 'console'],
            'level': DJANGO_LOG_LEVEL,
            'propagate': True,
        },
    },
}

# Create logs directory
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

