# Generated by Django 4.2.7 on 2025-07-01 19:59

from django.db import migrations


def ensure_password_column(apps, schema_editor):
    """
    Ensure the password column exists in the predictions_employee table.
    This handles cases where the column might be missing in production.
    """
    from django.db import connection
    
    with connection.cursor() as cursor:
        # Check if the password column exists
        cursor.execute("""
            SELECT COUNT(*) 
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE() 
            AND TABLE_NAME = 'predictions_employee' 
            AND COLUMN_NAME = 'password'
        """)
        
        column_exists = cursor.fetchone()[0] > 0
        
        if not column_exists:
            print("Adding missing password column to predictions_employee table...")
            cursor.execute("""
                ALTER TABLE predictions_employee 
                ADD COLUMN password VARCHAR(128) NOT NULL DEFAULT ''
            """)
            print("Password column added successfully!")
        else:
            print("Password column already exists, skipping...")


def reverse_ensure_password_column(apps, schema_editor):
    """
    Reverse operation - we don't want to drop the password column
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('predictions', '0002_remove_name_field'),
    ]

    operations = [
        migrations.RunPython(ensure_password_column, reverse_ensure_password_column),
    ]
